import unittest
from test_landsatbuoycalib import TestLandsatBuoyCalib_NARR as TestLandsatBuoyCalib
from landsatbuoycalib import landsat_data

class TestLandsatDataFuncs(TestLandsatBuoyCalib):
    def test_connect_earthexplorer_no_proxy(self):
        self.assertTrue(landsat_data.connect_earthexplorer_no_proxy())

    def test_metadata_keys(self):
        test_mtl_file = '/cis/ugrad/nid4986/Landsat-Buoy-Calibration/test/unit/assets/LC80130332013145LGN00_MTL.txt'
        test_keys = ['BPF_NAME_OLI', 'BPF_NAME_TIRS', 'CLOUD_COVER', 'CLOUD_COVER_LAND', 'CORNER_LL_LAT_PRODUCT', 'CORNER_LL_LON_PRODUCT', 'CORNER_LL_PROJECTION_X_PRODUCT', 'CORNER_LL_PROJECTION_Y_PRODUCT', 'CORNER_LR_LAT_PRODUCT', 'CORNER_LR_LON_PRODUCT', 'CORNER_LR_PROJECTION_X_PRODUCT', 'CORNER_LR_PROJECTION_Y_PRODUCT', 'CORNER_UL_LAT_PRODUCT', 'CORNER_UL_LON_PRODUCT', 'CORNER_UL_PROJECTION_X_PRODUCT', 'CORNER_UL_PROJECTION_Y_PRODUCT', 'CORNER_UR_LAT_PRODUCT', 'CORNER_UR_LON_PRODUCT', 'CORNER_UR_PROJECTION_X_PRODUCT', 'CORNER_UR_PROJECTION_Y_PRODUCT', 'CPF_NAME', 'DATA_TYPE', 'DATE_ACQUIRED', 'DATUM', 'EARTH_SUN_DISTANCE', 'ELEVATION_SOURCE', 'ELLIPSOID', 'END_GROUP', 'FILE_DATE', 'FILE_NAME_BAND_1', 'FILE_NAME_BAND_10', 'FILE_NAME_BAND_11', 'FILE_NAME_BAND_2', 'FILE_NAME_BAND_3', 'FILE_NAME_BAND_4', 'FILE_NAME_BAND_5', 'FILE_NAME_BAND_6', 'FILE_NAME_BAND_7', 'FILE_NAME_BAND_8', 'FILE_NAME_BAND_9', 'FILE_NAME_BAND_QUALITY', 'GRID_CELL_SIZE_PANCHROMATIC', 'GRID_CELL_SIZE_REFLECTIVE', 'GRID_CELL_SIZE_THERMAL', 'GROUP', 'IMAGE_QUALITY_OLI', 'IMAGE_QUALITY_TIRS', 'K1_CONSTANT_BAND_10', 'K1_CONSTANT_BAND_11', 'K2_CONSTANT_BAND_10', 'K2_CONSTANT_BAND_11', 'LANDSAT_SCENE_ID', 'MAP_PROJECTION', 'METADATA_FILE_NAME', 'NADIR_OFFNADIR', 'ORIENTATION', 'ORIGIN', 'OUTPUT_FORMAT', 'PANCHROMATIC_LINES', 'PANCHROMATIC_SAMPLES', 'PROCESSING_SOFTWARE_VERSION', 'QUANTIZE_CAL_MAX_BAND_1', 'QUANTIZE_CAL_MAX_BAND_10', 'QUANTIZE_CAL_MAX_BAND_11', 'QUANTIZE_CAL_MAX_BAND_2', 'QUANTIZE_CAL_MAX_BAND_3', 'QUANTIZE_CAL_MAX_BAND_4', 'QUANTIZE_CAL_MAX_BAND_5', 'QUANTIZE_CAL_MAX_BAND_6', 'QUANTIZE_CAL_MAX_BAND_7', 'QUANTIZE_CAL_MAX_BAND_8', 'QUANTIZE_CAL_MAX_BAND_9', 'QUANTIZE_CAL_MIN_BAND_1', 'QUANTIZE_CAL_MIN_BAND_10', 'QUANTIZE_CAL_MIN_BAND_11', 'QUANTIZE_CAL_MIN_BAND_2', 'QUANTIZE_CAL_MIN_BAND_3', 'QUANTIZE_CAL_MIN_BAND_4', 'QUANTIZE_CAL_MIN_BAND_5', 'QUANTIZE_CAL_MIN_BAND_6', 'QUANTIZE_CAL_MIN_BAND_7', 'QUANTIZE_CAL_MIN_BAND_8', 'QUANTIZE_CAL_MIN_BAND_9', 'RADIANCE_ADD_BAND_1', 'RADIANCE_ADD_BAND_10', 'RADIANCE_ADD_BAND_11', 'RADIANCE_ADD_BAND_2', 'RADIANCE_ADD_BAND_3', 'RADIANCE_ADD_BAND_4', 'RADIANCE_ADD_BAND_5', 'RADIANCE_ADD_BAND_6', 'RADIANCE_ADD_BAND_7', 'RADIANCE_ADD_BAND_8', 'RADIANCE_ADD_BAND_9', 'RADIANCE_MAXIMUM_BAND_1', 'RADIANCE_MAXIMUM_BAND_10', 'RADIANCE_MAXIMUM_BAND_11', 'RADIANCE_MAXIMUM_BAND_2', 'RADIANCE_MAXIMUM_BAND_3', 'RADIANCE_MAXIMUM_BAND_4', 'RADIANCE_MAXIMUM_BAND_5', 'RADIANCE_MAXIMUM_BAND_6', 'RADIANCE_MAXIMUM_BAND_7', 'RADIANCE_MAXIMUM_BAND_8', 'RADIANCE_MAXIMUM_BAND_9', 'RADIANCE_MINIMUM_BAND_1', 'RADIANCE_MINIMUM_BAND_10', 'RADIANCE_MINIMUM_BAND_11', 'RADIANCE_MINIMUM_BAND_2', 'RADIANCE_MINIMUM_BAND_3', 'RADIANCE_MINIMUM_BAND_4', 'RADIANCE_MINIMUM_BAND_5', 'RADIANCE_MINIMUM_BAND_6', 'RADIANCE_MINIMUM_BAND_7', 'RADIANCE_MINIMUM_BAND_8', 'RADIANCE_MINIMUM_BAND_9', 'RADIANCE_MULT_BAND_1', 'RADIANCE_MULT_BAND_10', 'RADIANCE_MULT_BAND_11', 'RADIANCE_MULT_BAND_2', 'RADIANCE_MULT_BAND_3', 'RADIANCE_MULT_BAND_4', 'RADIANCE_MULT_BAND_5', 'RADIANCE_MULT_BAND_6', 'RADIANCE_MULT_BAND_7', 'RADIANCE_MULT_BAND_8', 'RADIANCE_MULT_BAND_9', 'REFLECTIVE_LINES', 'REFLECTIVE_SAMPLES', 'REQUEST_ID', 'RESAMPLING_OPTION', 'RLUT_FILE_NAME', 'ROLL_ANGLE', 'SCENE_CENTER_TIME', 'SENSOR_ID', 'SPACECRAFT_ID', 'STATION_ID', 'SUN_AZIMUTH', 'SUN_ELEVATION', 'TARGET_WRS_PATH', 'TARGET_WRS_ROW', 'THERMAL_LINES', 'THERMAL_SAMPLES', 'TIRS_SSM_POSITION_STATUS', 'UTM_ZONE', 'WRS_PATH', 'WRS_ROW']
        
        test_dict = landsat_data.read_metadata(test_mtl_file)

        for i in test_keys:
            if not i in test_dict.keys():
                self.fail('Key %s was not in test_dict.keys()' % i)

    def test_metadata_values(self):
        test_mtl_file = '/cis/ugrad/nid4986/Landsat-Buoy-Calibration/test/unit/assets/LC80130332013145LGN00_MTL.txt'
        test_dict = landsat_data.read_metadata(test_mtl_file)
        
        self.assertEqual(test_dict['CORNER_LL_LAT_PRODUCT'], 37.90967)
        self.assertEqual(test_dict['CORNER_LL_PROJECTION_Y_PRODUCT'], 4195800)
        self.assertEqual(test_dict['SPACECRAFT_ID'], 'LANDSAT_8')  # check for " characters
        self.assertEqual(test_dict['SCENE_CENTER_TIME'], '15:36:08.3685583Z')
        
